----------------------Python-------------------------

Variable 
a, b , 5
constant
7 ,6,7

data Type
Example	Data Type 

str  x = "Hello World"	
int  x = 20	
float x = 20.5	
comlex x = 1j


list x = ["apple", "banana", "cherry"]	
tuple x = ("apple", "banana", "cherry")	
range x = range(6)	
dict x = {"name" : "John", "age" : 36}	
set x = {"apple", "banana", "cherry"}
bool x = True

frozenet x = frozenset({"apple", "banana", "cherry"})		
bypes x = b"Hello"	
bytearray x = bytearray(5)	
memoryview x = memoryview(bytes(5))

Conversion of data type (Casting)

a=float(x)
b=int(a)

x = 5
y = "John"
print(x + y)

String in python (python prebuiled fuctions)

String Slicing
b = "Hello, World!"
print(b[:5])

b = "Hello, World!"
print(b[2:])

b = "Hello, World!"
print(b[-5:-2])

String modifying
a = "Hello, World!"
print(a.upper())
a = "Hello, World!"
print(a.lower())
a = "Hello, World!"
print(a.replace("H", "J"))
a = "Hello, World!"
print(a.split(","))

Method	Description
capitalize()	Converts the first character to upper case
casefold()	Converts string into lower case
center()	Returns a centered string
count()	Returns the number of times a specified value occurs in a string
encode()	Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()	Searches the string for a specified value and returns the position of where it was found
format()	Formats specified values in a string
format_map()	Formats specified values in a string
index()	Searches the string for a specified value and returns the position of where it was found
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
join()	Joins the elements of an iterable to the end of the string
ljust()	Returns a left justified version of the string
lower()	Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()	Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust()	Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split()	Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()	Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()	Converts the first character of each word to upper case
translate()	Returns a translated string
upper()	Converts a string into upper case
zfill()	Fills the string with a specified number of 0 values at the beginning


Python Operators

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Identity operators
Membership operators
Bitwise operators

Arithmetic Operators
+	Addition	x + y	
-	Subtraction	x - y	
*	Multiplication	x * y	
/	Division	x / y	
%	Modulus	x % y	
**	Exponentiation	x ** y	
//	Floor division	x // y

Assignment Operators
Operator	Example	Same As	Try it
=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
//=	x //= 3	x = x // 3	
**=	x **= 3	x = x ** 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3

Comparison Operators

==	Equal	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to	x <= y	


Logical Operators
and 	Returns True if both statements are true	x < 5 and  x < 10	
or	Returns True if one of the statements is true	x < 5 or x < 4	
not	Reverse the result, returns False if the result is true	not(x < 5 and x < 10)	

Identity Operators
is 	Returns True if both variables are the same object	x is y	
is not	Returns True if both variables are not the same object	x is not y	


Membership Operators

in 	Returns True if a sequence with the specified value is present in the object	x in y	
not in	Returns True if a sequence with the specified value is not present in the object	x not in y

Bitwise Operators

& 	AND	Sets each bit to 1 if both bits are 1
|	OR	Sets each bit to 1 if one of two bits is 1
 ^	XOR	Sets each bit to 1 if only one of two bits is 1
~ 	NOT	Inverts all the bits
<<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off

Lists
Ordered
Changeable
Allow Duplicates

mylist = ["Java", "python", "C#"]
print(mylist)
mylist[1]
mylist[2:5]
mylist[:4]
mylist[2:]
mylist[-4:-1]
mylist[1] = "php"
mylist[1:3] = ["C", "C++"]
mylist.insert(2, "R")
mylist.append(".net")
thislist = ["apple", "banana", "cherry"]
tropical = ["mango", "pineapple", "papaya"]
thislist.extend(tropical)
thislist.remove("banana")
thislist.pop(1)
thislist.pop()
del thislist[0]
del thislist
thislist.clear()
thislist.sort()
thislist.sort(reverse = True)
mylist = thislist.copy()
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
list3 = list1 + list2
list1.extend(list2)
append()	Adds an element at the end of the list
clear()		Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list

Tuple

Ordered
Unchangeable
Allow Duplicates

mytuple = ("oracle", "mysql", "mongodb")
len(mytuple)
type(mytuple)
mytuple[1]
mytuple[2:5]
mytuple[:4]
update tuple
convert to list
mylist=list(mytuple)
fruits = ("apple", "banana", "cherry")
(green, yellow, red) = fruits
tuple1 = ("a", "b" , "c")
tuple2 = (1, 2, 3)
tuple3 = tuple1 + tuple2
fruits = ("apple", "banana", "cherry")
mytuple = fruits * 2

Sets
Unordered
Unchangeable
Duplicates Not Allowed
thisset = {"laravel", "Django", "condigneter","spring"}
thisset.add("Hybernet")

thisset = ("oracle", "mysql", "mongodb")
thatset = {"laravel", "Django", "condigneter","spring"}
thisset.update(thatset)
thisset.remove("mongodb")
thisset.discard("mongodb")
thisset.pop()
thisset.clear()
del thisset
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}
set3 = set1.union(set2) return a new set

set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}

set1.update(set2)

add()				Adds an element to the set
clear()				Removes all the elements from the set
copy()				Returns a copy of the set
difference()			Returns a set containing the difference between two or more sets
difference_update()		Removes the items in this set that are also included in another, specified set
discard()			Remove the specified item
intersection()			Returns a set, that is the intersection of two other sets
intersection_update()		Removes the items in this set that are not present in other, specified set(s)
isdisjoint()			Returns whether two sets have a intersection or not
issubset()			Returns whether another set contains this set or not
issuperset()			Returns whether this set contains another set or not
pop()				Removes an element from the set
remove()			Removes the specified element
symmetric_difference()		Returns a set with the symmetric differences of two sets
symmetric_difference_update()	inserts the symmetric differences from this set and another
union()				Return a set containing the union of sets
update()			Update the set with the union of this set and others

Dictionaries
Ordered or Unordered
Changeable
Duplicates Not Allowed

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = thisdict["model"]
x = thisdict.get("model")
x = thisdict.keys()
x = thisdict.values()
x = thisdict.items()
thisdict["color"] = "red"

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["year"] = 2018

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"year": 2020})
thisdict["color"] = "red"
thisdict.update({"color": "red"})
thisdict.pop("model")
del thisdict["model"]
del thisdict
thisdict.clear()

nested Dict
myfamily = {
  "child1" : {
    "name" : "Emil",
    "year" : 2004
  },
  "child2" : {
    "name" : "Tobias",
    "year" : 2007
  },
  "child3" : {
    "name" : "Linus",
    "year" : 2011
  }

clear()		Removes all the elements from the dictionary
copy()		Returns a copy of the dictionary
get()		Returns the value of the specified key
items()		Returns a list containing a tuple for each key value pair
keys()		Returns a list containing the dictionary's keys
pop()		Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary


Data format ------ XML,json,xlsx,csv,xls


Python Condition
If statements
a = 10
b = 20
if b > a:
  print("b is greater than a")


a = 10
b = 10
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")

a = 20
b = 30
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")


a = 20
b = 30
if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")

Nested if
x = 41
if x > 10:
  print("Above ten,")
  if x > 20:
    print("and also above 20!")
  else:
    print("but not above 20.")


Loop
----------------
while loops
for loops


while Loop
i = 1
while i < 6:
  print(i)
  i += 1

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

For loop

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    break
  print(x,end=" , ")

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)

escape characters used in Python

\'	Single Quote	
\\	Backslash	
\n	New Line	
\t	Tab	
\b	Backspace	
\f	Form Feed

a=18
if a>90 and a<=100:
    print("A+ Grade")
if a>80 and a<=90:
    print("A Grade")
if a>70 and a<=80:
    print("B+ Grade")
if a>60 and a<=70:
    print("B grade")
if a>50 and a<=60:
    print("C+ Grade")
if a>40 and a<=50:
    print("C grade")
if a>=0 and a<=40:
    print("Fail")
else:
    print('Wrong values')

Function 

predefind fuction
userdefind fuction

Nonargumented funtion 
Def ak():
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)

argumented fuction
def ak(a,b):
c=a+b
print(c)


Python Lambda

lambda arguments : expression


x = lambda a : a + 10
print(x(5))

x = lambda a, b : a * b
print(x(5, 6))

x = lambda a, b, c : a + b + c
print(x(5, 6, 2))

def myfunc(n):
  return lambda a : a * n

def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))


Madule

import math
x = math.sqrt(64)
print(x)

import math
x = math.pi
print(x)

-------------------------
kilometers = float(input("Enter value in kilometers: "))

# conversion factor
conv_fac = 0.621371

# calculate miles
miles = kilometers * conv_fac
print('%f kilometers is equal to %0.2f miles' %(kilometers,miles))

Positive number
---------------------
num = float(input("Enter a number: "))
if num > 0:
   print("Positive number")
elif num == 0:
   print("Zero")
else:
   print("Negative number")
